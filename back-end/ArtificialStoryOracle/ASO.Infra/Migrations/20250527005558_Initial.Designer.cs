// <auto-generated />
using System;
using ASO.Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ASO.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250527005558_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ASO.Domain.Game.Entities.Ancestry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Backstory")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("backstory");

                    b.Property<int>("Displacement")
                        .HasColumnType("integer")
                        .HasColumnName("displacement");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<float>("Size")
                        .HasColumnType("real")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.ToTable("ancestries", (string)null);
                });

            modelBuilder.Entity("ASO.Domain.Game.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<int>("TypeCharacter")
                        .HasColumnType("integer")
                        .HasColumnName("type_character");

                    b.Property<Guid>("ancestry_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ancestry_id");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("ASO.Domain.Game.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("classes", (string)null);
                });

            modelBuilder.Entity("ASO.Domain.Game.Entities.Expertise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("ArmorPenalty")
                        .HasColumnType("boolean")
                        .HasColumnName("armor_penalty");

                    b.Property<int>("KeyAttributes")
                        .HasColumnType("integer")
                        .HasColumnName("key_attributes");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<bool>("Trained")
                        .HasColumnType("boolean")
                        .HasColumnName("trained");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("expertises", (string)null);
                });

            modelBuilder.Entity("characters_classes", b =>
                {
                    b.Property<Guid>("class_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("character_id")
                        .HasColumnType("uuid");

                    b.HasKey("class_id", "character_id");

                    b.HasIndex("character_id");

                    b.ToTable("characters_classes");
                });

            modelBuilder.Entity("characters_expertises", b =>
                {
                    b.Property<Guid>("expertise_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("character_id")
                        .HasColumnType("uuid");

                    b.HasKey("expertise_id", "character_id");

                    b.HasIndex("character_id");

                    b.ToTable("character_expertises", (string)null);
                });

            modelBuilder.Entity("ASO.Domain.Game.Entities.Ancestry", b =>
                {
                    b.OwnsOne("ASO.Domain.Game.ValueObjects.AttributeModifiers", "Modifiers", b1 =>
                        {
                            b1.Property<Guid>("AncestryId")
                                .HasColumnType("uuid");

                            b1.Property<int>("ModCharisma")
                                .HasColumnType("integer")
                                .HasColumnName("mod_charisma");

                            b1.Property<int>("ModConstitution")
                                .HasColumnType("integer")
                                .HasColumnName("mod_constitution");

                            b1.Property<int>("ModDexterity")
                                .HasColumnType("integer")
                                .HasColumnName("mod_dexterity");

                            b1.Property<int>("ModIntelligence")
                                .HasColumnType("integer")
                                .HasColumnName("mod_intelligence");

                            b1.Property<int>("ModStrength")
                                .HasColumnType("integer")
                                .HasColumnName("mod_strength");

                            b1.Property<int>("ModWisdom")
                                .HasColumnType("integer")
                                .HasColumnName("mod_wisdom");

                            b1.HasKey("AncestryId");

                            b1.ToTable("ancestries");

                            b1.WithOwner()
                                .HasForeignKey("AncestryId");
                        });

                    b.Navigation("Modifiers")
                        .IsRequired();
                });

            modelBuilder.Entity("ASO.Domain.Game.Entities.Character", b =>
                {
                    b.HasOne("ASO.Domain.Game.Entities.Ancestry", "Ancestry")
                        .WithMany()
                        .HasForeignKey("ancestry_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ASO.Domain.Shared.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("CharacterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("last_name");

                            b1.HasKey("CharacterId");

                            b1.ToTable("characters");

                            b1.WithOwner()
                                .HasForeignKey("CharacterId");
                        });

                    b.Navigation("Ancestry");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("ASO.Domain.Game.Entities.Class", b =>
                {
                    b.OwnsOne("ASO.Domain.Game.ValueObjects.Statistics", "Statistics", b1 =>
                        {
                            b1.Property<Guid>("ClassId")
                                .HasColumnType("uuid");

                            b1.Property<int>("InitHealthPoints")
                                .HasColumnType("integer")
                                .HasColumnName("init_health_points");

                            b1.Property<int>("InitManaPoints")
                                .HasColumnType("integer")
                                .HasColumnName("init_mana_points");

                            b1.HasKey("ClassId");

                            b1.ToTable("classes");

                            b1.WithOwner()
                                .HasForeignKey("ClassId");
                        });

                    b.Navigation("Statistics")
                        .IsRequired();
                });

            modelBuilder.Entity("characters_classes", b =>
                {
                    b.HasOne("ASO.Domain.Game.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASO.Domain.Game.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("class_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("characters_expertises", b =>
                {
                    b.HasOne("ASO.Domain.Game.Entities.Character", null)
                        .WithMany()
                        .HasForeignKey("character_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASO.Domain.Game.Entities.Expertise", null)
                        .WithMany()
                        .HasForeignKey("expertise_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
